---
- hosts: localhost

  vars_prompt:

    - name: user
      prompt: non-root user name (leave blank to skip)
      private: false
      default: ""

    - name: user_password
      prompt: user password (leave blank if skipped above)
      unsafe: true
      private: true
      confirm: true
      encrypt: "sha512_crypt"
      default: ""

    - name: hostname
      prompt: enter hostname (leave blank to skip)
      private: false
      default: ""

  tasks:

    - name: detect nvidia gpu
      shell: "lspci | grep -i nvidia"
      register: nvidia_check
      failed_when: false
      changed_when: false

    - set_fact:
        has_nvidia: "{{ nvidia_check.stdout != '' }}"

    - name: root specific
      when: ansible_user_id == 'root'
      block:

        - name: fail if running as root but no user specified
          assert:
            that:
              - not (ansible_user_id == 'root' and user|length == 0)
            fail_msg: "must specify a user when running as root"

        - name: disable NetworkManager DNS overwrites
          copy:
            content: |
              [main]
              dns=none
            dest: /etc/NetworkManager/NetworkManager.conf

        - name: pacman update
          pacman:
            update_cache: true
            upgrade: true

        - name: set hostname
          hostname:
            name: "{{ hostname }}"
          when:
            - hostname|length > 0 and hostname != ansible_hostname

        - name: pacman install core packages
          pacman:
            name: "{{ item }}"
          loop:
            - archiso                    # create an arch linux ISO
            - base-devel                 # Core Arch build environment (makepkg, gcc, etc.)
            - less
            - linux-headers
            - linux-lts-headers
            - man-db                     # Man pages database
            - networkmanager
            - openssh                    # SSH client/server
            - sof-firmware
            - sops
            - tmux
            - unzip
            - usbutils
            - wget
            - xdg-user-dirs
            - zsh
            - zsh-completions

        - name: pacman install audio packages
          pacman:
            name: "{{ item }}"
          loop:
            - alsa-utils                 # ALSA sound utilities (amixer, etc.)
            - pavucontrol                # GUI volume control for PipeWire/PulseAudio
            - pipewire                   # Next-gen audio/video server
            - wireplumber                # Session manager for PipeWire
            - phonon-qt5-vlc             # Qt multimedia backend using VLC

        - name: pacman install bluetooth packages
          pacman:
            name: "{{ item }}"
          loop:
            - blueman                    # Bluetooth manager GUI
            - bluez                      # Official Bluetooth protocol stack
            - bluez-utils                # Bluetooth command-line utilities

        - name: pacman install networking packages
          pacman:
            name: "{{ item }}"
          loop:
            - bind                       # DNS tools (e.g. `dig`)
            - dnscrypt-proxy             # DNS encryption (DoH/DoT)
            - ccid                       # Smart card CCID driver
            - network-manager-applet
            - openconnect
            - pcsclite                   # Daemon to communicate with smartcards
            - hopenpgp-tools             # Additional PGP utilities
            - yubikey-manager            # Manage YubiKeys
            - yubikey-personalization    # Configure YubiKey parameters
            - gnupg
            - jq                         # JSON command-line processor
            - pass                       # GPG-based password manager
            - pass-otp                   # OTP extension for pass

        - name: pacman install cli packages
          pacman:
            name: "{{ item }}"
          loop:
            - fzf                        # Fuzzy finder for the command line
            - rustup                     # Rust toolchain installer
            - thefuck                    # oops
            - gdb

        - name: pacman install file management, utility packages
          pacman:
            name: "{{ item }}"
          loop:
            - brightnessctl              # Control screen brightness via CLI
            - dolphin                    # KDE file manager
            - fd
            - ffmpeg
            - imagemagick
            - libfido2                   # FIDO/U2F authentication library
            - libva                      # VA-API for video acceleration
            - poppler
            - ripgrep
            - yazi
            - zbar                       # Barcode/QR code scanner CLI tools
            - zoxide

        - name: pacman install docker packages
          pacman:
            name: "{{ item }}"
          loop:
            - docker
            - docker-buildx
            - docker-compose

        - name: pacman install display packages
          pacman:
            name: "{{ item }}"
          loop:
            - mako                       # Wayland notification daemon
            - usbip                      # USB over IP utility
            - sddm                       # Display manager
            - wl-clipboard               # Wayland clipboard utilities
            - ydotool                    # Programmatic mouse/keyboard

        - name: pacman install development packages
          pacman:
            name: "{{ item }}"
          loop:
            - clang
            - cmake
            - dart
            - direnv
            - git
            - git-lfs
            - go
            - gradle
            - jdk-openjdk
            - luarocks
            - mitmproxy
            - nodejs
            - nvchecker
            - ollama
            - python
            - yarn

        - name: pacman install visual packages
          pacman:
            name: "{{ item }}"
          loop:
            # === Terminal / Browsers / Editors ===
            - alacritty
            - chromium
            - neovim
            - blender

            # === Linux command replacements ===
            - bat                        # cat
            - eza                        # ls

            # === Wayland Compositor & Related Tools ===
            - hyprland
            - hyprpicker                 # Color picker for Wayland
            - grim                       # Screenshot tool for Wayland
            - slurp                      # Select regions in Wayland (e.g. screenshot)
            - swayidle                   # Idle management for Wayland
            - waybar                     # Customizable Wayland status bar
            - waylock                    # Screen locker for Wayland
            - wf-recorder                # Screen recorder for Wayland
            - wofi                       # Wayland application launcher
            - xdg-desktop-portal-hyprland

            # === Fonts / Theming / Qt Integration ===
            - font-manager
            - noto-fonts-emoji
            - ttf-fira-sans
            - ttf-firacode-nerd
            - ttf-hack-nerd
            - ttf-jetbrains-mono-nerd
            - qt5ct                      # Qt5 configuration tool
            - qt5-wayland                # Wayland support for Qt5 apps
            - qt6-wayland                # Wayland support for Qt6 apps

            # === GPU / Multimedia Tools ===
            - obs-studio                 # Video recording/streaming
            - speedcrunch                # calculator
            - spotify-launcher
            - udiskie                    # Automount tool for removable media
            - vlc
            - gimp
            - polkit-kde-agent           # Polkit auth agent for KDE
            - v4l2loopback-dkms          # Virtual V4L2 camera device module

            # === development tools ===
            - git-delta
            - lazygit

        - name: pacman install nvidia packages
          pacman:
            name: "{{ item }}"
          loop:
            - cuda                       # NVIDIA GPU compute toolkit
            - nvidia-dkms                # NVIDIA proprietary driver (DKMS)
            - nvidia-utils
            - nvidia-container-toolkit
          when: has_nvidia

        - name: pacman install utilities
          pacman:
            name:
              - cups                       # Printing system

        - name: configure ssh
          copy:
            content: |
              PasswordAuthentication no
              AuthenticationMethods publickey
            dest: /etc/ssh/sshd_config.d/20-force_publickey_auth.conf

        - name: configure dnscrypt-proxy for DoH
          lineinfile:
            path: /etc/dnscrypt-proxy/dnscrypt-proxy.toml
            regexp: "# server_names ="
            line: "server_names = ['google', 'cloudflare', 'google-ipv6', 'cloudflare-ipv6']"

        - name: update /etc/resolv.conf
          copy:
            content: |
              nameserver 127.0.0.1
              options edns0
            dest: /etc/resolv.conf

        - name: enable services
          block:

            - name: restart NetworkManager
              systemd_service:
                name: NetworkManager
                state: restarted

            - name: enable services
              systemd_service:
                name: "{{ item }}"
                enabled: true
                state: started
              loop:
                - bluetooth
                - cups
                - dnscrypt-proxy
                - sshd
                - systemd-timesyncd
                - pcscd

            - name: enable nvidia services
              systemd_service:
                name: "{{ item }}"
                enabled: true
              loop:
                - nvidia-hibernate
                - nvidia-resume
                - nvidia-suspend
              when: has_nvidia

        - name: ensure sddm config directory exists
          file:
            path: /etc/sddm.conf.d
            state: directory

        - name: configure automatic login
          copy:
            content: |
              [Autologin]
              User={{ user }}
              Session=hyprland-uwsm.desktop
              Relogin=true
            dest: /etc/sddm.conf.d/autologin.conf

        - name: ensure /boot/loader directory exists and is empty
          file:
            path: "/boot/loader/entries"
            state: "{{ item }}"
          loop:
            - absent
            - directory

        - name: create boot loader config
          copy:
            content: |
              default arch.conf
              timeout 5
              console-mode max
              editor no
            dest: /boot/loader/loader.conf

        - name: get root partition device
          shell: df -h | grep '[[:space:]]/$' | cut -d ' ' -f1
          register: root_device
          changed_when: false

        - set_fact:
            root_device: '{{ root_device.stdout }}'

        - name: set part_uuid variable
          shell: "blkid | grep {{ root_device }} | grep -oP 'PARTUUID=\"\\K[^\"]+'"
          register: part_uuid
          changed_when: false

        - set_fact:
            part_uuid: '{{ part_uuid.stdout }}'

        - name: create boot loader entries
          copy:
            content: |
              title   {{ item.title }}
              linux   {{ item.kernel }}
              initrd  /intel-ucode.img
              initrd  {{ item.imageName }}
              options options root=PARTUUID={{ part_uuid }} zswap.enabled=0 rw rootfstype=ext4{{ ' nvidia-drm.modeset=1' if has_nvidia else '' }}
            dest: /boot/loader/entries/{{ item.fileName }}
          loop:
            - { title: "arch linux", imageName: "/initramfs-linux.img", kernel: "/vmlinuz-linux", fileName: "arch.conf"}
            - { title: "arch linux (lts)", imageName: "/initramfs-linux-lts.img", kernel: "/vmlinuz-linux-lts", fileName: "arch-lts.conf"}
            - { title: "arch linux fallback", imageName: "/initramfs-linux-fallback.img", kernel: "/vmlinuz-linux", fileName: "arch-fallback.conf"}
            - { title: "arch linux (lts) fallback", imageName: "/initramfs-linux-lts-fallback.img", kernel: "/vmlinuz-linux-lts", fileName: "arch-lts-fallback.conf"}

        - name: get boot partition device
          shell: df -h | grep '[[:space:]]/boot$' | cut -d ' ' -f1
          register: boot_device
          changed_when: false

        - set_fact:
            boot_device: '{{ boot_device.stdout }}'

        - name: add boot to efibootmgr
          shell: >
            efibootmgr --create --disk {{ boot_device }} --part 1 \
            --label "Arch Linux" \
            --loader "\EFI\systemd\systemd-bootx64.efi"

        - name: configure ramdisk
          copy:
            content: |
              MODULES=({{ 'nvidia nvidia_modeset nvidia_uvm nvidia_drm' if has_nvidia else '' }})
              BINARIES=()
              FILES=()
              HOOKS=(base udev autodetect keyboard keymap modconf block filesystems fsck)
            dest: /etc/mkinitcpio.conf

        - name: create ramdisk
          command: mkinitcpio --config /etc/mkinitcpio.conf --generate /boot/initramfs-linux.img

        - name: nvidia config
          when: has_nvidia
          block:

            - name: configure modprobe
              copy:
                content: |
                  options nvidia-drm modeset=1
                  options nvidia NVreg_PreserveVideoMemoryAllocations=1
                dest: /etc/modprobe.d/nvidia.conf

            - name: configure nvidia udev rule
              copy:
                content: 'ACTION=="add", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x030000", ATTR{power/control}="auto"'
                dest: /etc/udev/rules.d/99-nvidia.rules

            - name: configure system container runtime
              command: "nvidia-ctk runtime configure --runtime=docker"

        - name: ignore lid closing (handled by hyprland)
          lineinfile:
            path: /etc/systemd/logind.conf
            regexp: '^(.*)HandleLidSwitch='
            line: "HandleLidSwitch=ignore"

        - name: set java sdk
          command: archlinux-java set java-23-openjdk

        - name: restart system docker
          systemd_service:
            name: docker
            state: restarted

        # https://docs.docker.com/engine/security/rootless/
        - name: configure sysctl for docker rootless
          copy:
            content: |
              kernel.unprivileged_userns_clone=1
            dest: /etc/sysctl.d/99-docker-rootless.conf

        - name: restart sysctl
          command: sysctl --system

        - name: stop system docker
          systemd_service:
            name: "{{ item }}"
            state: stopped
          loop:
            - docker.service
            - docker.socket

        - name: create boot loader config
          copy:
            content: |
              polkit.addRule(function(action, subject) {
                if (action.id == "org.debian.pcsc-lite.access_card" &&
                  subject.isInGroup("wheel")) {
                  return polkit.Result.YES;
                }
              });
              polkit.addRule(function(action, subject) {
                if (action.id == "org.debian.pcsc-lite.access_pcsc" &&
                  subject.isInGroup("wheel")) {
                  return polkit.Result.YES;
                }
              });
            dest: /etc/polkit-1/rules.d/99-pcscd.rules

        - name: grant wheel group sudo
          copy:
            content: "%wheel ALL=(ALL) NOPASSWD: ALL\n"
            dest: "/etc/sudoers.d/wheel"

        - name: check if user exists
          command: id -u {{ user }}
          register: user_id
          failed_when: false
          changed_when: false
          when: user|length > 0

        - name: create user
          user:
            append: true
            groups:
              - docker
              - input
              - wheel
            name: "{{ user }}"
            password: "{{ user_password }}"
            shell: /usr/bin/zsh
          when: user|length > 0 and user_id.rc != 0

        - name: enable systemd linger
          command: "loginctl enable-linger {{ user }}"

    - name: set user variable to current user if no user given
      set_fact:
        user: "{{ ansible_user_id }}"
      when: user|length == 0 and ansible_user_id != 'root'

    - name: user specific
      when: user|length != 0
      block:

        - name: configure rust
          command: rustup default stable
          args:
            chdir: "/home/{{ user }}"
          environment:
            HOME: "/home/{{ user }}"

        - name: check if dotfiles are downloaded
          stat: "path=/home/{{ user }}/.dotfiles"
          register: dotfiles

        - name: clone dotfiles
          when: not dotfiles.stat.exists
          git:
            repo: https://github.com/LowEntropyEntity/.dotfiles.git
            dest: "/home/{{ user }}/.dotfiles/"
            bare: yes
          register: dotfiles_clone

        - name: checkout dotfiles
          shell: "git --git-dir={{ lookup('env','DOTFILES_GIT_DIR') | default(user_dotfiles_dir) }} --work-tree={{ lookup('env','DOTFILES_WORK_TREE') | default(user_home) }} checkout -f {{ lookup('env','DOTFILES_DEFAULT_BRANCH') | default('main') }}"
          args:
            chdir: "/home/{{ user }}/.dotfiles"
          vars:
            - user_home: "/home/{{ user }}"
            - user_dotfiles_dir: "/home/{{ user }}/.dotfiles"
          register: debug
          when: dotfiles_clone is changed or not dotfiles.stat.exists

        - debug:
            msg: "{{ debug.stdout }}"
          when: dotfiles_clone is changed or not dotfiles.stat.exists

        - name: import gpg key
          command: gpg --locate-key sean@sean.xyz
          args:
            chdir: "/home/{{ user }}"
          register: gpg_key_check
          changed_when: false

        - name: trust gpg key
          shell: echo "1F86464D595F2DCD5F6029B6E81D523E5DD412E2:6:" | gpg --import-ownertrust
          when: "'1F86464D595F2DCD5F6029B6E81D523E5DD412E2' not in gpg_key_check.stdout"

        - name: sync submodules
          shell: "git --git-dir={{ lookup('env','DOTFILES_GIT_DIR') | default(user_dotfiles_dir) }} --work-tree={{ lookup('env','DOTFILES_WORK_TREE') | default(user_home) }} submodule update --init"
          args:
            chdir: "/home/{{ user }}/.dotfiles"
          vars:
            - user_home: "/home/{{ user }}"
            - user_dotfiles_dir: "/home/{{ user }}/.dotfiles"
          ignore_errors: true
          register: debug

        - debug:
            msg: "{{ debug.stdout }}"

        - name: list aur packages
          find:
            paths: "/home/{{ user }}/.src/aur.archlinux.org"
            file_type: directory
          register: aur_directories

        - set_fact:
            aur_directories: "{{ aur_directories.files }}"

        - name: pring aur directories
          debug:
            msg: "{{ item.path }}"
          loop: "{{ aur_directories }}"
          when: aur_directories|length > 0

        - name: build aur packages
          command: makepkg -sirc --noconfirm
          args:
            chdir: "{{ item.path }}"
          loop: "{{ aur_directories }}"
          when: aur_directories|length > 0

        - name: install aur packages with yay
          command: yay -S --needed --noconfirm {{ item }}
          ignore_errors: true
          loop:
            - hyprpolkitagent
            - uwsm
            - swaylock-effects
            - swww

            # ai
            - chatgpt-shell-cli
            - jan-bin
            - python-huggingface-hub
            - grimblast-git

            # privacy / security
            - keybase-bin
            - proton-vpn-gtk-app

            # collaboration
            - slack-desktop
            - zoom

            # development
            - android-studio
            - aws-cli-v2
            - gitmux-bin
            - lazydocker
            # this is failing: flutter
            - postman-bin
            - visual-studio-code-bin
          register: yay_install_results
          retries: 2
          delay: 5
          until: yay_install_results.rc == 0

        - name: show yay installation failures
          debug:
            msg: "Failed to install {{ item.item }}: {{ item.stderr }}"
          loop: "{{ yay_install_results.results }}"
          when: item.rc != 0

        - name: check if cmdline-tools destination file exists
          stat:
            path: /home/{{ user }}/android-sdk/cmdline-tools/latest
          register: cmdlinetools_destination

        - name: create android studio cmdline-tools directory
          file:
            path: "/home/{{ user }}/android-sdk/cmdline-tools/latest"
            state: directory

        - name: install android cmdline-tools
          unarchive:
            src: "https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip"
            dest: /tmp
            remote_src: yes
          when: not cmdlinetools_destination.stat.exists

        - name: move android cmdline-tools to proper location
          shell: "mv /tmp/cmdline-tools/* /home/{{ user }}/android-sdk/cmdline-tools/latest"
          when: not cmdlinetools_destination.stat.exists

        - name: install android tools
          shell: "echo y | /home/{{ user }}/android-sdk/cmdline-tools/latest/bin/sdkmanager '{{ item }}'"
          loop:
            - "emulator"
            - "platform-tools"
            - "tools"
            - "build-tools;36.0.0-rc3"
            - "platforms;android-35"
            - "sources;android-35"
            - "extras;android;m2repository"
            - "extras;google;m2repository"
            - "extras;google;webdriver"
            - "--licenses"
          register: sdkmanager_result
          retries: 2
          delay: 5
          until: sdkmanager_result.rc == 0

        - name: install nvm
          shell: curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
          environment:
            HOME: "/home/{{ user }}"

        - name: install npm
          shell: nvm install --lts
          environment:
            HOME: "/home/{{ user }}"

        - name: install devcontainers cli
          npm:
            name: devcontainers/cli
            global: true

        - name: install tree-sitter
          npm:
            name: tree-sitter-cli
            global: true

        - name: get user id
          command: "id -u"
          register: user_id
          changed_when: false

        - set_fact:
            user_uid: '{{ user_id.stdout }}'

        - name: check if docker rootless is installed
          stat: "path=/home/{{ user }}/bin/dockerd"
          register: rootless_install

        - name: install docker rootless
          shell: curl -fsSL https://get.docker.com/rootless | sh
          environment:
            HOME: "/home/{{ user }}"
            XDG_RUNTIME_DIR: "/run/user/{{ user_uid }}"
          register: rootless
          ignore_errors: true
          when: not rootless_install.stat.exists

        - name: docker rootless install stdout
          debug:
            msg: "{{ rootless.stdout }}"
          when: not rootless_install.stat.exists

        - name: docker rootless install stderr
          debug:
            msg: "{{ rootless.stderr }}"
          when: not rootless_install.stat.exists

        # - name: point flutter to android-sdk
        #   command: "flutter config --android-sdk /home/{{ user }}/android-sdk"
        #   args:
        #     chdir: "/home/{{ user }}"
        #   environment:
        #     HOME: "/home/{{ user }}"
        #   changed_when: false

        # https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html
        - name: nvidia config
          when: has_nvidia
          block:

            - name: configure container runtime
              command: "nvidia-ctk runtime configure --runtime=docker --config=/home/{{ user }}/.config/docker/daemon.json"

        - name: restart docker after configuring container runtime
          systemd_service:
            name: docker
            state: restarted
            scope: user
          ignore_errors: true

      become: true
      become_user: "{{ user }}"

    # https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html
    - name: nvidia config
      when: has_nvidia
      block:

        - name: run nvidia-ctk
          command: nvidia-ctk config --set nvidia-container-cli.no-cgroups --in-place
          when: ansible_user_id == 'root'

    - name: start system docker
      systemd_service:
        name: docker
        state: started

    - name: configure uinput rules
      copy:
        content: |
          [Unit]
          Description=ydotool daemon
          After=multi-user.target

          [Service]
          ExecStart=/usr/bin/ydotoold
          Restart=always
          User={{ user }}
          RuntimeDirectory=ydotool
          Environment=YDOTTOOL_SOCKET=/run/user/1000/ydotool/ydotool_socket
          Environment=XDG_RUNTIME_DIR=/run/user/1000

          [Install]
          WantedBy=default.target
        dest: /etc/systemd/system/ydotoold.service
      when: ansible_user_id == 'root'

    - name: configure uinput rules
      copy:
        content: |
          KERNEL=="uinput", GROUP="input", MODE="0660"
        dest: /etc/udev/rules.d/99-uinput.rules
      when: ansible_user_id == 'root'

    - name: enable services
      systemd_service:
        name: "{{ item }}"
        daemon_reload: true
        enabled: true
        state: started
      loop:
        - docker
        - ydotoold
        - sddm
      when: ansible_user_id == 'root'

    - name: disable root
      user:
        name: root
        password: "!"
      when: ansible_user_id == 'root'
